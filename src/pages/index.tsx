import Head from 'next/head'
import * as THREE from 'three';
import {useEffect} from "react";
import styles from '../../styles/Three-js.module.css'
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';

function graphics() {
  const canvas = document.querySelector('#my-canvas')!;
  const renderer = new THREE.WebGLRenderer({canvas});
  renderer.setClearColor( 0x050503 );

  const camera = new THREE.PerspectiveCamera(
      75,
      window.innerWidth / window.innerHeight,
      0.1,
      100
  );
  camera.position.set(0, 0, 5);

  const scene = new THREE.Scene();

  function makeInstance(geometry:THREE.BoxGeometry, color:number, x:number) {
    const material = new THREE.MeshPhongMaterial({color});

    const cube = new THREE.Mesh(geometry, material);
    scene.add(cube);

    cube.position.x = x;

    return cube;
  }

  const boxGeometry = new THREE.BoxGeometry(1, 1, 1);

  const cubes = [
    makeInstance(boxGeometry, 0x44aa88,  0),
    makeInstance(boxGeometry, 0x8844aa, -2),
    makeInstance(boxGeometry, 0xaa8844,  2),
  ];

  const color = 0xFFFFFF;
  const intensity = 1;
  const light = new THREE.DirectionalLight(color, intensity);
  light.position.set(-1, 2, 4);
  scene.add(light);

  function resizeRendererToDisplaySize(renderer) {
    const canvas = renderer.domElement;
    const pixelRatio = window.devicePixelRatio;
    const width = canvas.clientWidth * pixelRatio;
    const height = canvas.clientHeight * pixelRatio;
    const needResize = canvas.width !== width || canvas.height !== height;
    if (needResize) {
      renderer.setSize(width, height, false);
    }
    return needResize;
  }

  function render(time:number) {
    if(resizeRendererToDisplaySize(renderer)) {
      const canvas = renderer.domElement;
      camera.aspect = canvas.clientWidth / canvas.clientHeight;
      camera.updateProjectionMatrix();
    }

    time *= 0.001;  // convert time to seconds

    cubes.forEach((cube, ndx) => {
      const speed = 1 + ndx * .1;
      const rot = time * speed;
      cube.rotation.x = rot;
      cube.rotation.y = rot;
    });

    renderer.render(scene, camera);

    requestAnimationFrame(render);
  }
  requestAnimationFrame(render);

}

export default function Home() {
  useEffect(() => graphics(), [])

  return (
    <>
      <Head>
        <title>Three.js training</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <style global jsx>{`
          html,
          body,
          body > div:first-child,
          div#__next,
          div#__next > div, div#__next > main{
            height: 100%;
          }
        `}</style>
        <canvas id={'my-canvas'} className={styles.threeJsCanvas}/>
      </main>
    </>
  )
}
